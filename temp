#include<bits/stdc++.h>

using namespace std;

#define precision(n)   cout << setprecision(n) << fixed
#define sf(a)          scanf("%d",&a)
#define sf2(a,b)       scanf("%d %d",&a,&b)
#define pi             3.1415926535
#define eps            0.000001
#define gl(a)          scanf("%llu",&a)
#define mod            1000000007
#define pf             printf
#define loop(ds,itr)   for ( auto itr = ds.begin(); itr != ds.end(); itr++ )
#define fr(i,n)        for ( int i = 0; i < n; i++ )
#define check(x)       cout << x << endl;
#define bug            cout << 'x' << endl;
#define srt(n)         (int)(sqrt(double(n))+eps)
#define e              2.71828182845
#define mp             make_pair
#define min4(a,b,c,d)  min(a,min(b,min(c,d)));
#define power(n,i)     (int)(pow(n,i)+eps)
#define inf            0x3f3f3f3f
///#define MAX            100005
#define f              first
#define s              second
#ifdef FACT
     #include <ctime>
     clock_t tStart = clock();
     #define debug(args...) {dbg,args; cerr<<endl;}
     #define timeStamp debug ("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
     #define bug printf("%d\n",__LINE__);

#else
    #define debug(args...)
    #define timeStamp

#endif

struct debugger{
    template<typename T> debugger & operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;


typedef long long ll;
typedef unsigned long long ull;
typedef pair < int,int > ii;
typedef priority_queue< int,vector<int>, greater<int> > pq_increasing;

string dest = "111110111100 110000100000";
map <string,int> lvl;
int rx,ry;
bool reached;
ii moves[] = { {-2,-1},{-2,+1},{+2,-1},{+2,+1},{+1,+2},{-1,+2},{+1,-2},{-1,-2} };

void dfs ( string s, int x, int y, int depth ) {
    if ( reached ) return;
    if ( depth > 11 ) return;
    if ( s == dest ) reached = true;
    int uc = x*5+y,vc,vx,vy;
    for ( int i = 0; i < 8; i++ ) {
        vx = (x+moves[i].f), vy = y+moves[i].s;
        if ( vx < 0 | vy < 0 | vx >= 5 | vy >= 5 ) continue;
        vc = vx*5+vy;
        swap(s[uc],s[vc]);
        if ( lvl[s] == 0 ) { lvl[s] = depth+1;dfs(s,vx,vy,depth+1);}
        swap(s[uc],s[vc]);
    }
}

int main () {
    ///freopen("input.txt","r",stdin);
    ///freopen("output.txt","w",stdout);
    ///ios_base::sync_with_stdio(false);
    ///cin.tie(0);
    int n;
    cin >> n;
    getchar();
    while ( n-- ) {
        lvl.clear();
        string temp,s = "";
        for ( int i = 0; i < 5; i++ ) {
            getline(cin,temp);
            ///cout << temp << endl;
            s += temp;
            for ( int j = 0; j < 5; j++ ) {
                if ( temp[j] == ' ' ) {rx=i,ry = j;}
            }
        }
        reached  = false;
        lvl[s] = 1;
        dfs(s,rx,ry,1);
        string ans;
        ans = ( !reached ) ? "Unsolvable in less than " : "Solvable in ";
        if ( !reached ) lvl[dest] = 12;
        cout << ans << lvl[dest]-1 << " move(s).\n";
    }
    return 0;
}
